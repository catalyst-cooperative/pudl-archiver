[tox]
envlist = ci

[testenv]
allowlist_externals =
    bash
    coverage
    sphinx-build
    twine
# shared directory for re-used packages
envdir = {toxinidir}/.env_tox
passenv =
    CI
    CONDA_PREFIX
    GITHUB_*
    GOOGLE_APPLICATION_CREDENTIALS
    HOME
    SQLALCHEMY_WARN_20
covargs = --cov={envsitepackagesdir}/pudl_archiver --cov-append --cov-report=xml
covreport = coverage report --sort=cover

#######################################################################################
# Code and Documentation Linters
#######################################################################################
[testenv:flake8]
description = Run the full suite of flake8 linters & static code analysis
skip_install = false
extras =
    tests
commands =
    flake8 --config tox.ini

[testenv:rstcheck]
description = Check formatting and syntax of RST files.
skip_install = false
extras =
    tests
commands =
    rstcheck --config tox.ini --recursive ./

[testenv:pre_commit]
description = Run git pre-commit hooks not covered by the other linters.
skip_install = false
extras =
    tests
commands =
    pre-commit run --all-files --show-diff-on-failure python-no-eval
    pre-commit run --all-files --show-diff-on-failure python-no-log-warn
    pre-commit run --all-files --show-diff-on-failure python-check-blanket-noqa
    pre-commit run --all-files --show-diff-on-failure check-merge-conflict
    pre-commit run --all-files --show-diff-on-failure check-yaml
    pre-commit run --all-files --show-diff-on-failure check-case-conflict
    pre-commit run --all-files --show-diff-on-failure debug-statements
    pre-commit run --all-files --show-diff-on-failure name-tests-test

[testenv:bandit]
description = Check the codebase for common insecure code patterns.
skip_install = false
extras =
    tests
commands =
    bandit -r src/pudl_archiver/

[testenv:linters]
description = Run the pre-commit, flake8 and bandit linters.
skip_install = false
extras =
    {[testenv:pre_commit]extras}
    {[testenv:bandit]extras}
    {[testenv:rstcheck]extras}
    {[testenv:flake8]extras}
commands =
    {[testenv:pre_commit]commands}
    {[testenv:bandit]commands}
    {[testenv:rstcheck]commands}
    {[testenv:flake8]commands}


#######################################################################################
# Test the code
#######################################################################################
[testenv:unit]
description = Run all the software unit tests.
extras =
    tests
commands =
    pytest {posargs} {[testenv]covargs} \
      --doctest-modules {envsitepackagesdir}/pudl_archiver \
      tests

[testenv:ci]
description = Run all continuous integration (CI) checks & generate test coverage.
skip_install = false
recreate = true
extras =
    {[testenv:linters]extras}
    {[testenv:unit]extras}
commands =
    coverage erase
    {[testenv:linters]commands}
    {[testenv:unit]commands}
    {[testenv]covreport}

#######################################################################################
# Configuration for various tools.
#######################################################################################
[pytest]
testpaths = .
addopts = --verbose
log_format = %(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s
log_date_format= %Y-%m-%d %H:%M:%S
log_cli = True
log_cli_level = INFO
doctest_optionflags = NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL ELLIPSIS
filterwarnings =
    ignore:distutils Version classes are deprecated:DeprecationWarning
    ignore:Creating a LegacyVersion:DeprecationWarning:pkg_resources[.*]

[flake8]
# A few linter errors and warnings that we are currently ignoring:
# * W503, W504: Line break before / after binary operator.
# * D401: Imperative mood.
# * E501: Overlong line
# * E203: Space before ':' (black recommends to ignore)
# * RST201,RST203,RST301: Google docstrings aren't RST until after being processed by
#   Napoleon. See https://github.com/peterjc/flake8-rst-docstrings/issues/17
extend-ignore = W503,W504,D401,E501,E203,RST201,RST203,RST301,
inline-quotes = double
max-line-length = 88
docstring-convention = google
# Files and directories that should not be subject to linting
extend-exclude =
    .env_tox,
    .eggs,
    build,
# We have a backlog of complex functions being skipped with noqa: C901
max-complexity = 10
format = ${cyan}%(path)s${reset}:${green}%(row)-4d${reset} ${red_bold}%(code)s${reset} %(text)s
rst-roles =
    attr,
    class,
    doc,
    func,
    meth,
    mod,
    obj,
    py:const,
    ref,
    user,
rst-directives =
    envvar,
    exception,
percent-greedy = 2
format-greedy = 2
# Don't force docstrings in tests
per-file-ignores =
    tests/*: D

[doc8]
max-line-length = 88
ignore-path =
    docs/_build

[rstcheck]
report_level = warning
ignore_roles = pr,issue,user
ignore_messages = (Hyperlink target ".*" is not referenced\.$|Duplicate implicit target name:)
ignore_directives = bibliography,todo
