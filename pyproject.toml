[project]
name = "pudl_archiver"
version = "0.2.0"
authors = [{name = "PUDL", email = "pudl@catalyst.coop"}]
requires-python = ">=3.12,<3.13"

dependencies = [
    "arelle-release>=2.25,<2.27",
    "catalystcoop.pudl @ git+https://github.com/catalyst-cooperative/pudl.git",
    "coloredlogs>=14",
    "dask<2024.5",  # Temporary pin -- conda packaging problem upstream
    "feedparser>=6.0",
    "frictionless>=5,<6",
    "pydantic>=2.7,<3",
    "python-dotenv~=1.0.0",
    "semantic_version>=2.8,<3",
    "tqdm>=4.64",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]


[project.optional-dependencies]
dev = [
    "ruff>=0.4,<0.5",
    "build>=1.2,<1.3",
    "tox>=4.0,<4.16",  # Python test environment manager
    "twine>=3.3,<5.1",  # Used to make releases to PyPI
    "types-requests",
]

docs = [
    "doc8>=1.1,<1.2",  # Ensures clean documentation formatting
    "furo>=2022.4.7",
    "sphinx>=7,<7.3.8",  # The default Python documentation engine
    "sphinx-autoapi>=3,<3.1",  # Generates documentation from docstrings
    "sphinx-issues>=1.2,<4.2",  # Allows references to GitHub issues
]

tests = [
    "coverage>=7,<7.6",  # Lets us track what code is being tested
    "doc8>=1.1,<1.2",  # Ensures clean documentation formatting
    "pre-commit>=3,<3.8",  # Allow us to run pre-commit hooks in testing
    "pydocstyle>=6,<6.4",  # Style guidelines for Python documentation
    "pytest>=8,<8.3",  # Our testing framework
    "pytest-asyncio>=0.20,<0.24",  # Test async functions
    "pytest-console-scripts>=1.1,<1.5",  # Allow automatic testing of scripts
    "pytest-cov>=5,<5.1",  # Pytest plugin for working with coverage
    "pytest-mock>=3.0,<3.15",  # Pytest plugin for mocking function calls and objects
    "ruff>=0.4,<0.5",
]

[project.scripts]
pudl_archiver = "pudl_archiver.cli:main"

[build-system]
requires = [
    "setuptools>=66",
]
build-backend = "setuptools.build_meta"

[tool.doc8]
max-line-length = 88
ignore-path = ["docs/_build"]

[tool.pytest.ini_options]
testpaths = "./"
filterwarnings = [
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:Creating a LegacyVersion:DeprecationWarning:pkg_resources[.*]",
]
addopts = "--verbose"
log_format = "%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_cli = "true"
log_cli_level = "INFO"
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ELLIPSIS",
]

[tool.ruff]
# Assume Python 3.12
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    # "ARG", # unused arguments
    # "B",  # flake8-bugbear
    "C",   # Limit cyclomatic complexity using mccabe
    "D",   # pydocstyle errors
    "E",   # pycodestyle errors
    "EXE", # executable file issues
    # "ERA", # eradicate: find commented out code
    "F",   # pyflakes
    "I",   # isort
    "ISC", # implicit string concatenation
    "N",   # pep8-naming
    "NPY", # NumPy specific checks
    "PD",  # pandas checks
    "PGH", # pygrep-hooks
    # "PL",  # pylint
    # "PT",  # pytest style
    "PTH", # use pathlib
    "Q",   # flake8-quotes
    "RET", # check return values
    "RSE", # unnecessary parenthises on raised exceptions
    "S",   # flake8-bandit
    "SIM", # flake8-simplify
    # "T",   # print statements found
    "UP", # pyupgrade (use modern python syntax)
    "W",  # pycodestyle warnings
]

ignore = [
    "D401",   # Require imperative mood in docstrings.
    "D417",
    "E501",   # Overlong lines.
    "E203",   # Space before ':' (black recommends to ignore)
    "PD003",  # Use of isna rather than isnull
    "PD004",  # Use of notna rather than notnull
    "PD008",  # Use of df.at[] rather than df.loc[]
    "PD010",  # Use of df.stack()
    "PD013",  # Use of df.unstack()
    "PD015",  # Use of pd.merge() rather than df.merge()
    "PD901",  # df as variable name
    "RET504", # Ignore unnecessary assignment before return
    "S101",   # Use of assert
]


# Don't automatically concatenate strings -- sometimes we forget a comma!
unfixable = ["ISC"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]    # Ignore unused imports
"tests/*" = ["D"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.isort]
known-first-party = ["ferc_xbrl_extractor"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

