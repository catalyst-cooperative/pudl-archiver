[project]
name = "pudl_archiver"
version = "0.2.0"
authors = [{ name = "PUDL", email = "pudl@catalyst.coop" }]
requires-python = ">=3.12,<3.13"

dependencies = [
    "catalystcoop.pudl @ git+https://github.com/catalyst-cooperative/pudl.git",
    "arelle-release>=2.37.23,<3",
    "beautifulsoup4>=4.13.4,<5",
    "coloredlogs>=14.0,<15",
    "dask>=2025.5.1,<2026",
    "deltalake>=1.0.2,<2",
    "feedparser>=6.0.11,<7",
    "frictionless>=5.18.1,<6",
    "pydantic>=2.11.7,<3",
    "python-dotenv>=1.1.0,<2",
    "pyyaml>=6.0.2,<7",
    "ruff>=0.11.13,<0.12",
    "semantic-version>=2.10.0,<3",
    "tqdm>=4.67.1,<5",
    "types-requests>=2.32.4.20250611,<3",
    "doc8>=2.0.0,<3",
    "furo>=2024.8.6,<2025",
    "sphinx>=8.2.3,<9",
    "sphinx-autoapi>=3.6.0,<4",
    "sphinx-issues>=5.0.1,<6",
    "coverage>=7.9.1,<8",
    "pre-commit>=4.2.0,<5",
    "cfgv>=3.4.0,<4",
    "pydocstyle>=6.3.0,<7",
    "pytest>=8.4.0,<9",
    "pytest-asyncio>=1.0.0,<2",
    "pytest-console-scripts>=1.4.1,<2",
    "pytest-cov>=6.2.1,<7",
    "pytest-mock>=3.14.1,<4",
]

classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.12",
]

[project.scripts]
pudl_archiver = "pudl_archiver.cli:main"

[build-system]
requires = ["setuptools>=75"]
build-backend = "setuptools.build_meta"

[tool.doc8]
max-line-length = 88
ignore-path = ["docs/_build"]

[tool.pytest.ini_options]
testpaths = "./"
filterwarnings = [
    "ignore:distutils Version classes are deprecated:DeprecationWarning",
    "ignore:Creating a LegacyVersion:DeprecationWarning:pkg_resources[.*]",
]
addopts = "--verbose"
log_format = "%(asctime)s [%(levelname)8s] %(name)s:%(lineno)s %(message)s"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_cli = true
log_cli_level = "INFO"
doctest_optionflags = ["NORMALIZE_WHITESPACE", "IGNORE_EXCEPTION_DETAIL", "ELLIPSIS"]
asyncio_mode = "auto"

[tool.ruff]
# Assume Python 3.12
target-version = "py312"
line-length = 88
indent-width = 4

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint]
select = [
    "A", # flake8-builtins
    # "ARG", # unused arguments
    # "B",  # flake8-bugbear
    "C", # Limit cyclomatic complexity using mccabe
    "D", # pydocstyle errors
    "E", # pycodestyle errors
    "EXE", # executable file issues
    # "ERA", # eradicate: find commented out code
    "F", # pyflakes
    "I", # isort
    "ISC", # implicit string concatenation
    "N", # pep8-naming
    "NPY", # NumPy specific checks
    "PD", # pandas checks
    "PGH", # pygrep-hooks
    # "PL",  # pylint
    # "PT",  # pytest style
    "PTH", # use pathlib
    "Q", # flake8-quotes
    "RET", # check return values
    "RSE", # unnecessary parenthises on raised exceptions
    "S", # flake8-bandit
    "SIM", # flake8-simplify
    # "T",   # print statements found
    "UP", # pyupgrade (use modern python syntax)
    "W", # pycodestyle warnings
]

ignore = [
    "D401", # Require imperative mood in docstrings.
    "D417",
    "E501", # Overlong lines.
    "E203", # Space before ':' (black recommends to ignore)
    "PD003", # Use of isna rather than isnull
    "PD004", # Use of notna rather than notnull
    "PD008", # Use of df.at[] rather than df.loc[]
    "PD010", # Use of df.stack()
    "PD013", # Use of df.unstack()
    "PD015", # Use of pd.merge() rather than df.merge()
    "PD901", # df as variable name
    "RET504", # Ignore unnecessary assignment before return
    "S101", # Use of assert
]

# Don't automatically concatenate strings -- sometimes we forget a comma!
unfixable = ["ISC"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"] # Ignore unused imports
"tests/*" = ["D"]

[tool.ruff.lint.pep8-naming]
# Allow Pydantic's `@validator` decorator to trigger class method treatment.
classmethod-decorators = ["pydantic.validator", "pydantic.root_validator"]

[tool.ruff.lint.isort]
known-first-party = ["ferc_xbrl_extractor"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.pixi.workspace]
channels = ["conda-forge"]
platforms = [
    "linux-64",
    "osx-64",
    "osx-arm64",
    # The google-cloud-sdk conda package doesn't support Windows
    # "win-64",
]
channel-priority = "strict"

[tool.pixi.pypi-dependencies]
pudl_archiver = { path = ".", editable = true }

[tool.pixi.environments]
default = { solve-group = "default" }

[tool.pixi.tasks]
pre-commit-install = "pre-commit install"
ruff = "ruff check ./"
pre-commit = "pre-commit run --all-files --show-diff-on-failure check-merge-conflict; pre-commit run --all-files --show-diff-on-failure check-yaml; pre-commit run --all-files --show-diff-on-failure check-case-conflict; pre-commit run --all-files --show-diff-on-failure debug-statements; pre-commit run --all-files --show-diff-on-failure name-tests-test"

unit = "pytest --cov-append --cov=src/pudl_archiver --cov-report=xml --doctest-modules src/pudl_archiver tests/unit"
integration = "pytest --cov-append --cov=src/pudl_archiver --cov-report=xml --doctest-modules src/pudl_archiver tests/integration"
coverage = "coverage report --sort=cover"

lint = [{task="ruff"}, {task="pre-commit"}]
ci = [{task="lint"}, {task="unit"}, {task="integration"}, {task="coverage"}]

[tool.pixi.dependencies]
gdal = ">=3.11.0,<4"
psycopg2-binary = ">=2.9.9,<3"
