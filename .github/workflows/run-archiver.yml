---
name: run-archiver

on:
  workflow_dispatch:
    inputs:
      datasets:
        description: 'Comma-separated list of datasets to archive (e.g., "ferc2","ferc6").'
        default: '"censuspep","doeiraec","doelead","eia176","eia191","eia757a","eia860","eia860m","eia861","eia923","eia930","eiaaeo","eiaapi","eiacbecs","eiamecs","eianems","eiarecs","eiasteo","eiawater","epacamd_eia","epacems","epaegrid","epamats","epapcap","ferc1","ferc2","ferc6","ferc60","ferc714","gridpathratoolkit","mshamines","nrelatb","nrelefs","nrelsiting","nrelss","nrelsts","phmsagas","sec10k","usgsuspvdb","usgsuswtdb","vcerare"'
        required: true
        type: string
      server:
        description: "Which Zenodo server would you like to run on?"
        default: "sandbox"
        options:
          - sandbox
          - production
        required: true
        type: choice
      create_github_issue:
        description: "Create a Github issue from this run?"
        default: false
        required: true
        type: boolean
  schedule:
    - cron: "21 8 1 * *" # 8:21 AM UTC, first of every month
    - cron: "21 8 * * 1" # 8:21 AM UTC, every Monday

jobs:
  archive-run:
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      matrix:
        # Note that we can't pass global env variables to the matrix, so we manually reproduce the list of datasets here.
        dataset: ${{ fromJSON(format('[{0}]', inputs.datasets || '"censuspep","doeiraec","doelead","eia176","eia191","eia757a","eia860","eia860m","eia861","eia923","eia930","eiaaeo","eiaapi","eiacbecs","eiamecs","eianems","eiarecs","eiasteo","eiawater","epacamd_eia","epacems","epaegrid","epamats","epapcap","ferc1","ferc2","ferc6","ferc60","ferc714","gridpathratoolkit","mshamines","nrelatb","nrelefs","nrelsiting","nrelss","nrelsts","phmsagas","sec10k","usgsuspvdb","usgsuswtdb","vcerare"' )) }}
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4

      - name: Set default GCP credentials
        id: gcloud-auth
        continue-on-error: true
        uses: "google-github-actions/auth@v2"
        with:
          workload_identity_provider: "projects/345950277072/locations/global/workloadIdentityPools/gh-actions-pool/providers/gh-actions-provider"
          service_account: "pudl-sources@catalyst-cooperative-pudl.iam.gserviceaccount.com"

      - name: Set up pixi
        uses: prefix-dev/setup-pixi@v0.8.11

      - name: Log the pixi environment
        run: |
          pixi info
          pixi list

      - name: Additional Playwright setup
        run: |
          pixi run playwright install --with-deps webkit

      - name: Run production archiver for ${{ matrix.dataset }}
        env:
          ZENODO_SANDBOX_TOKEN_UPLOAD: ${{ secrets.ZENODO_SANDBOX_TOKEN_UPLOAD }}
          ZENODO_SANDBOX_TOKEN_PUBLISH: ${{ secrets.ZENODO_SANDBOX_TOKEN_PUBLISH }}
          EPACEMS_API_KEY: ${{ secrets.EPACEMS_API_KEY }}
          ZENODO_TOKEN_UPLOAD: ${{ secrets.ZENODO_TOKEN_UPLOAD }}
          ZENODO_TOKEN_PUBLISH: ${{ secrets.ZENODO_TOKEN_PUBLISH }}
        if: ${{inputs.server == 'production' || github.event_name == 'schedule'}}
        run: |
          pixi run pudl_archiver --datasets ${{ matrix.dataset }} --summary-file ${{ matrix.dataset }}_run_summary.json --clobber-unchanged

      - name: Run sandbox archiver for ${{ matrix.dataset }}
        env:
          ZENODO_SANDBOX_TOKEN_UPLOAD: ${{ secrets.ZENODO_SANDBOX_TOKEN_UPLOAD }}
          ZENODO_SANDBOX_TOKEN_PUBLISH: ${{ secrets.ZENODO_SANDBOX_TOKEN_PUBLISH }}
          EPACEMS_API_KEY: ${{ secrets.EPACEMS_API_KEY }}
          ZENODO_TOKEN_UPLOAD: ${{ secrets.ZENODO_TOKEN_UPLOAD }}
          ZENODO_TOKEN_PUBLISH: ${{ secrets.ZENODO_TOKEN_PUBLISH }}
        if: ${{ inputs.server == 'sandbox' }}
        # set -o pipefail passes on any failure codes to the next step,
        # enabling us to see whether or not the pudl_archiver run failed.
        run: |
          set -o pipefail
          pixi run pudl_archiver --datasets ${{ matrix.dataset }} --sandbox --summary-file ${{ matrix.dataset }}_run_summary.json --clobber-unchanged 2>&1 | tee ${{ matrix.dataset }}_log.txt

      - name: Save failed runs
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: error-log-${{ matrix.dataset }}
          path: ${{ matrix.dataset }}_log.txt

      - name: Upload run summaries
        if: always()
        id: upload_summaries
        uses: actions/upload-artifact@v4
        with:
          name: run-summaries-${{ matrix.dataset }}
          path: ${{ matrix.dataset }}_run_summary.json

  archive-notify:
    runs-on: ubuntu-latest
    needs:
      - archive-run
    if: ${{ always() }}
    steps:
      - uses: actions/checkout@v4
      - name: Download summaries
        id: download-summaries
        uses: actions/download-artifact@v4
        with:
          pattern: run-summaries-*
          merge-multiple: true
      - name: Download failures
        id: download-artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: error-log-*
          merge-multiple: true
      - name: Show downloaded artifacts
        run: ls -R
      - name: Munge summaries together
        id: all_summaries
        run: |
          {
            echo "ERRORS<<EOF"
            ./scripts/make_github_notification_message.py --summary-files *_run_summary.json --error-files *_log.txt --summary-type error
            echo EOF
            echo "FAILURES<<EOF"
            ./scripts/make_github_notification_message.py --summary-files *_run_summary.json --error-files *_log.txt --summary-type failure
            echo EOF
            echo "CHANGES<<EOF"
            ./scripts/make_github_notification_message.py --summary-files *_run_summary.json --error-files *_log.txt --summary-type change
            echo EOF
            echo "UNCHANGED<<EOF"
            ./scripts/make_github_notification_message.py --summary-files *_run_summary.json --error-files *_log.txt --summary-type unchanged
            echo EOF
          } | tee -a "$GITHUB_OUTPUT"

  make-github-issue:
    # If event is a scheduled run on the first of the month or a workflow run where an issue
    # is requested, create an issue. Do not create issues for weekly Monday runs to avoid
    # having to manually close them for now, given the goal of publishing archives monthly.
    if: ${{ always() && ((github.event_name == 'schedule' && github.event.schedule == '21 8 1 * *') || inputs.create_github_issue == true) }}
    runs-on: ubuntu-latest
    needs:
      - archive-run
      - archive-notify
    steps:
      - uses: actions/checkout@v4
      - name: Create an issue
        id: create-issue
        uses: JasonEtco/create-an-issue@v2.9.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          ERRORS: ${{ env.ERRORS }}
          FAILURES: ${{ env.FAILURES }}
          CHANGES: ${{ env.CHANGES }}
          UNCHANGED: ${{ env.UNCHANGED }}
        with:
          filename: .github/ISSUE_TEMPLATE/monthly-archive-update.md
      - run: echo "GITHUB_URL=${{ steps.create-issue.outputs.url }}" >> $GITHUB_ENV
    outputs:
      github-url: ${{ steps.create-issue.outputs.GITHUB_URL}}

  make-slack-announcement:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs:
      - archive-run
      - make-github-issue
    env:
      github-url: ${{ needs.make-github-issue.outputs.github-url }}
    steps:
      - uses: slackapi/slack-github-action@v2.1.1
        with:
          method: chat.postMessage
          token: ${{ secrets.PUDL_DEPLOY_SLACK_TOKEN }}
          payload: |
            text: "PUDL data archive run complete: $GITHUB-URL"
            channel: "C03FHB9N0PQ"
